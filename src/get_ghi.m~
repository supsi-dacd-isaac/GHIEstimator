function [GHI_est,GHI_est_i,thetas,ftrust,y_hat] = get_ghi(data,identification_pars,optimization_pars,location,use_fmincon)
% Estimate GHI from PV power signal and ambient temperature profile.
% Inputs: data: structure contatining the following fields: {'P','t','T',
%               'GHImcr','GHImcr_clear','GHI3e','GHI'}. All fields but
%               'P','t' and 'T' can be empty (empty array []).
%         identification: structure containing 

if nargin<5
    use_fmincon = true;
end
%% Check presence of all inputs
data_fields = {'P','t','T','GHImcr','GHImcr_clear','GHI3e','GHI'};
identification_fields = {'use_all','getWholeDay','clearSkyFromSat','t_filt','rmse_tol','n_clear_window'};
optimization_fields = {'expWeight','do_plots','max_iter','lambda','derivatives','k_outlier','use_ftrust','n_init','use_single_pv_plant','correction'};
location_fields = {'latitude','longitude','altitude','UTC','n_thetas'};
try
    P = data.P;
    t = data.t;
    T = data.T;
    GHImcr_clear = data.GHImcr_clear; % can be empty. Used for identification. If not provided, a clear sky model is used instead.
    GHImcr = data.GHImcr; % can be empty, used for valdiation only
    GHI3e = data.GHI3e; % can be empty, used for validation only
    GHI = data.GHI; % can be empty, in this case do not plot performances
catch
    for i=1:length(data_fields)
        missing_dat(i) = ~isfield(data,data_fields{i});
    end
    fprintf('Missing data fields:\n')
    sprintf('%s\n',data_fields{missing_dat})
    error('Missing fields in data struct')
end


for i=1:length(identification_fields)
    missing_id(i) = ~isfield(identification_pars,identification_fields{i});
end

if any(missing_id)
    fprintf('Missing identification fields:\n')
    sprintf('%s\n',identification_fields{missing_id})
    error('Missing fields in identification struct')
end

try
     expWeight = optimization_pars.expWeight;
     do_plots = optimization_pars.do_plots;
     lambda = optimization_pars.lambda;
     derivatives = optimization_pars.derivatives;
     k_outlier = optimization_pars.k_outlier;
     use_ftrust = optimization_pars.use_ftrust;
     n_init = optimization_pars.n_init;
     use_single_pv_plant = optimization_pars.use_single_pv_plant;
     correction = optimization_pars.correction;
     max_iter = optimization_pars.max_iter;
catch
    for i=1:length(optimization_fields)
        missing_opt(i) = ~isfield(optimization_pars,optimization_fields{i});
    end
    fprintf('Missing optimization fields:\n')
    sprintf('%s\n',optimization_fields{missing_opt})
    error('Missing fields in optimization struct')
end

 
for i=1:length(location_fields)
    missing_loc(i) = ~isfield(location,location_fields{i});
end
if any(missing_loc)
    fprintf('Missing optimization fields:\n')
    sprintf('%s\n',location_fields{missing_loc})
    error('Missing fields in location struct')
end


%% Identify nominal powers and orientations
if isempty(identification_pars.rmse_tol)
    identification_pars.rmse_tol = 1e-1;
end
if isempty(identification_pars.t_filt)
    identification_pars.t_filt = 6*2;
end
if isempty(identification_pars.n_clear_window)
    identification_pars.n_clear_window = 10;
end

t_filt = identification_pars.t_filt;
rmse_tol = identification_pars.rmse_tol;
[thetas,ftrust] = get_thetas(P,t,location,T,t_filt,rmse_tol,identification_pars,GHImcr_clear,use_fmincon);
thetas = thetas.thetas_biweight_refit; 

%% Estimate GHI
opt_pars.expWeight = expWeight;
opt_pars.do_plots = do_plots;
opt_pars.lambda = lambda;
opt_pars.max_iter = max_iter;
opt_pars.correction = correction;

% Use normalized power signals and normalized thetas
P_norm = P./sum(thetas);
thetas_norm =thetas./sum(thetas);

% Estimate GHI recursively
if use_ftrust
    [GHI_est,y_hat] = ghi_estimator(P_norm,GHI,t,location,thetas_norm,T,n_init,opt_pars,derivatives,k_outlier,ftrust);
else
    [GHI_est,y_hat] = ghi_estimator(P_norm,GHI,t,location,thetas_norm,T,n_init,opt_pars,derivatives,k_outlier,[]);
end

%de-normalize estimated PV signals
y_hat = y_hat.*sum(thetas); 

if use_single_pv_plant
    for i=1:size(P,2)
        P_norm_i = P(:,i)/sum(thetas(:,i));
        thetas_norm_i =thetas(:,i)/sum(thetas(:,i));
        [GHI_est_i(:,i),~ ] = ghi_estimator(P_norm_i,GHI,t,location,thetas_norm_i,T,n_init,opt_pars,derivatives,k_outlier); 
    end
else
    GHI_est_i = [];
end
    
%% Do plots
if ~isempty(GHI)
    saveplot = false;
    only_means = false;
    title_str = [];
    pyr_tol = 0.03;
    do_some_plots(GHI,GHI_est,GHI_est_i,T,t,pyr_tol,GHImcr,GHI3e,saveplot,only_means,title_str)
end


